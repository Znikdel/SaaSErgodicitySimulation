[General]
network = PretioWorkload
#record-eventlog = true

num-rngs = 2

**.cloudNetwork.ipv4Delayer.rng-0 = 1
**.cloudNetwork.ipv4Delayer.config = xmldoc("internetCloud.xml")

*.client[*].numApps = 1
*.client[*].app[0].typename="tryClient"
*.client[*].app[0].connectAddress = "server[0]"
#*.client[*].app[0].stopTime = 10000s
#*.client[*].app[0].numRequestsPerSession = int(exponential(2))
*.client[*].app[0].connectPort = 1000
*.client[*].app[0].requestLength = 1B*int(truncnormal(150,10))
*.client[*].app[0].replyLength = 1B*int(truncnormal(350,20))
#*.client[*].app[0].requestLength = 10B
#*.client[*].app[0].replyLength = 10B
#*.client[*].numPcapRecorders = 1
#*.client[*].pcapRecorder[0].pcapFile = "results/client0.pcap"
#**.crcMode = "computed"
#**.fcsMode = "computed"
#*.client[*].app[0].thinkTime = int(exponential(0.5s))
#time gap between sessions
#*.client[*].app[0].idleInterval = int(exponential(1s))


*.server[*].numApps = 1
*.server[*].app[0].typename = "tryServer"
#*.server[*].app[0].replyDelay= int(exponential(0.25s))
*.server[*].ppp[*].ppp.queue.typename="DropTailQueue"
*.server[*].ppp[*].ppp.queue.packetCapacity = 1


**.ppp[*].ppp.queue.typename = "DropTailQueue" # in routers
**.ppp[*].ppp.queue.packetCapacity = 1  # in routers



[Config Type1-requests]
description = "The arrival of user-initiated sessions can be modeled as a Poisson distribution"
*.numClients = 1
*.numServers = 1
*.client[0].app[0].numRequestsPerSession = 1
*.client[0].app[0].idleInterval = int(exponential(0.04s))


[Config Type2-requests]
description = "The requests are expected within each session follow a binomial distribution"
*.numClients = 1

*.client[0].app[0].idleInterval = int(exponential(0.04s)) # time between two sessions
*.client[*].app[0].numRequestsPerSession = 1+int(bernoulli(0.4))*int(binomial(5,0.27))
*.client[*].app[0].thinkTime = int(exponential(5s))  # makes each session longer

[Config Pretio-wl-1-webserver]
description = "It simulates pretio workload with one dedicated server"
*.numClients = 10
*.numServers = 1

*.client[*].app[0].idleInterval = int(exponential(0.04s)) # time between two sessions
*.client[*].app[0].numRequestsPerSession = 1+int(bernoulli(0.1))*int(binomial(15,0.6)) #each user session first makes an initial http request, then if the conditions for subsequent event met, the next
                                                                                       #req made, this is simulated using bernoulli. the remaining markovian sequence of events simulated using binomial
*.client[*].app[0].thinkTime = int(exponential(2s))  # times between two requests, makes each session longer

[Config replyDelay025]
description = "It simulates pretio workload with one dedicated server"
*.numClients = 10
*.numServers = 1
*.server[*].app[0].replyDelay= int(exponential(0.25s))

*.client[*].app[0].idleInterval = int(exponential(0.04s)) # time between two sessions
*.client[*].app[0].numRequestsPerSession = 1+int(bernoulli(0.9))*int(binomial(15,0.6)) #each user session first makes an initial http request, then if the conditions for subsequent event met, the next
                                                                                      #req made, this is simulated using bernoulli. the remaining markovian sequence of events simulated using binomial

*.client[*].app[0].thinkTime = int(exponential(2s))  # times between two requests, makes each session longer

[Config replyDelay050]
description = "It simulates pretio workload with one dedicated server"
*.numClients = 10
*.numServers = 1
*.server[*].app[0].replyDelay= int(exponential(0.5s))

*.client[*].app[0].idleInterval = int(exponential(0.04s)) # time between two sessions
*.client[*].app[0].numRequestsPerSession = 1+int(bernoulli(0.9))*int(binomial(15,0.6)) #each user session first makes an initial http request, then if the conditions for subsequent event met, the next
                                                                                      #req made, this is simulated using bernoulli. the remaining markovian sequence of events simulated using binomial

*.client[*].app[0].thinkTime = int(exponential(2s))  # times between two requests, makes each session longer


[Config replyDelay001withoutIdleInterval-client10-capacity5]
description = "It simulates pretio workload with one dedicated server"
*.numClients = 10
*.numServers = 1
*.server[*].app[0].replyDelay= int(exponential(0.01s))
*.server[*].OS_scheduler.S[*].serviceTime = 2s
*.server[*].OS_scheduler.Q[*].capacity = 5
#*.client[*].app[0].idleInterval = int(exponential(0.04s)) # time between two sessions
*.client[*].app[0].idleInterval = 0

#*.client[*].app[0].numRequestsPerSession = 1+int(binomial(15,0.6)) #each user session first makes an initial http request, then if the conditions for subsequent event met, the next
 *.client[*].app[0].numRequestsPerSession=int(exponential(40))                                                                                    #req made, this is simulated using bernoulli. the remaining markovian sequence of events simulated using binomial

*.client[*].app[0].thinkTime = int(exponential(0.01s))  # times between two requests, makes each session longer

[Config replyDelay001withoutIdleInterval-client10-capacity8]
description = "It simulates pretio workload with one dedicated server"
*.numClients = 10
*.numServers = 1
*.server[*].app[0].replyDelay= int(exponential(0.01s))
*.server[*].OS_scheduler.S[*].serviceTime = 2s
*.server[*].OS_scheduler.Q[*].capacity = 8
#*.client[*].app[0].idleInterval = int(exponential(0.04s)) # time between two sessions
*.client[*].app[0].idleInterval = 0

#*.client[*].app[0].numRequestsPerSession = 1+int(binomial(15,0.6)) #each user session first makes an initial http request, then if the conditions for subsequent event met, the next
 *.client[*].app[0].numRequestsPerSession=int(exponential(40))                                                                                    #req made, this is simulated using bernoulli. the remaining markovian sequence of events simulated using binomial

*.client[*].app[0].thinkTime = int(exponential(0.01s))  # times between two requests, makes each session longer

[Config replyDelay001withoutIdleInterval-client10-capacity100]
description = "It simulates pretio workload with one dedicated server"
*.numClients = 10
*.numServers = 1
*.server[*].app[0].replyDelay= int(exponential(0.01s))
*.server[*].OS_scheduler.S[*].serviceTime = 2s
*.server[*].OS_scheduler.Q[*].capacity = 100
#*.client[*].app[0].idleInterval = int(exponential(0.04s)) # time between two sessions
*.client[*].app[0].idleInterval = 0

#*.client[*].app[0].numRequestsPerSession = 1+int(binomial(15,0.6)) #each user session first makes an initial http request, then if the conditions for subsequent event met, the next
*.client[*].app[0].numRequestsPerSession=4                                                                                   #req made, this is simulated using bernoulli. the remaining markovian sequence of events simulated using binomial
*.client[*].app[0].thinkTime = 0s # times between two requests, makes each session longer


[Config replyDelay001withoutIdleInterval-client10-capacity10Server2]
description = "It simulates pretio workload with one dedicated server"
*.numClients = 10
*.numServers = 2
*.server[*].app[0].replyDelay= int(exponential(0.01s))
*.server[*].OS_scheduler.S[*].serviceTime = 2s
*.server[*].OS_scheduler.Q[*].capacity = 10
#*.client[*].app[0].idleInterval = int(exponential(0.04s)) # time between two sessions
*.client[*].app[0].idleInterval = 0
*.client[0].app[0].connectAddress = "server[1]"
*.client[2].app[0].connectAddress = "server[1]"
*.client[4].app[0].connectAddress = "server[1]"
*.client[6].app[0].connectAddress = "server[1]"
#*.client[*].app[0].numRequestsPerSession = 1+int(binomial(15,0.6)) #each user session first makes an initial http request, then if the conditions for subsequent event met, the next
*.client[*].app[0].numRequestsPerSession=4                                                                                   #req made, this is simulated using bernoulli. the remaining markovian sequence of events simulated using binomial
*.client[*].app[0].thinkTime = 0s # times between two requests, makes each session longer

[Config replyDelay050-heavy-load-100c]
description = "It simulates pretio workload with one dedicated server and 100 clients"
*.numClients = 100
*.numServers = 1
*.server[*].app[0].replyDelay= int(exponential(0.5s))
*.server[*].OS_scheduler.S[*].serviceTime = 2s

#*.client[*].app[0].idleInterval = int(exponential(0.04s)) # time between two sessions
*.client[*].app[0].idleInterval = 0
*.client[*].app[0].numRequestsPerSession = 1+int(binomial(15,0.8)) #each user session first makes an initial http request, then if the conditions for subsequent event met, the next
                                                                                     #req made, this is simulated using bernoulli. the remaining markovian sequence of events simulated using binomial

*.client[*].app[0].thinkTime = int(exponential(0.002s))  # times between two requests, makes each session longer

[Config replyDelay050-heavy-load-1000c]
description = "It simulates pretio workload with one dedicated server and 1000 clients"
*.numClients = 1000
*.numServers = 1
*.server[*].app[0].replyDelay= int(exponential(0.5s))

*.client[*].app[0].idleInterval = int(exponential(0.04s)) # time between two sessions
#*.client[*].app[0].idleInterval = 0
*.client[*].app[0].numRequestsPerSession = 1+int(binomial(15,0.6)) #each user session first makes an initial http request, then if the conditions for subsequent event met, the next
                                                                                     #req made, this is simulated using bernoulli. the remaining markovian sequence of events simulated using binomial

*.client[*].app[0].thinkTime = int(exponential(0.02s))  # times between two requests, makes each session longer
